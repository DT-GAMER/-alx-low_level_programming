!<arch>
0-isupper.c/    0           0     0     644     0         `
0-memset.c/     0           0     0     644     320       `
#include "main.h"

/**
 * _memset - Fill memory with a constant byte
 * @s: memory area to fill
 * @b: constant byte to fill
 * @n: bytes of memory area to fill
 *
 * Return: the memory area filled
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int a;

for (a = 0; a < n; a++)
{
s[a] = b;
}
return (s);
}
0-strcat.c/     0           0     0     644     410       `
 #include "main.h"

/**
 * _strcat - concatenate two strings together
 * @dest: pointer to first string
 * @src: pointer to second string
 * Return: address to the concatenated string
 */
char *_strcat(char *dest, char *src)
{
int i = 0;
int j = 0;

while (i >= 0)
{
if (*(dest + i) == '\0')
break;
i++;
}

while (j >= 0)
{
*(dest + i) = *(j + src);
if (*(j + src) == '\0')
break;
j++;
i++;
}
return (dest);
}
100-atoi.c/     0           0     0     644     438       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer.
 * @s: The pointer to convert
 *
 * Return: A integer
 */
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}
1-isdigit.c/    0           0     0     644     286       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - Entry point
 * @c: character value to be executed
 * Description - Write a function that checks for a digit(0 through 9)
 * Return: return 1 or 0
 */

int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}
1-memcpy.c/     0           0     0     644     321       `
#include "main.h"

/**
 * _memcpy - copy memory area
 * @dest: dest memory area
 * @src: source memory area
 * @n: bytes from memory area to copy
 *
 * Return: memory area replaced
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int a;

for (a = 0; a < n; a++)
{
dest[a] = src[a];
}

return (dest);
}

1-strncat.c/    0           0     0     644     513       `
#include "main.h"

/**
 * _strncat - concatenate first n characters of the second string
 * to first string
 * @dest: pointer to first string
 * @src: pointer to second string
 * @n: number of characters in second string to concatenate
 * Return: address to concatenated string
 */
char *_strncat(char *dest, char *src, int n)
{
int j = 0, i = 0;

while (*(dest + i) != 0)
i++;

while (j < n)
{
*(dest + i) = *(src + j);
if (*(src + j) == '\0')
break;
j++;
i++;
}
if (j == n)
*(dest + i) = '\0';
return (dest);
}

2-strchr.c/     0           0     0     644     316       `
#include "main.h"

/**
 * _strchr - locate character in string
 * @s: source string
 * @c: character to find
 *
 * Return: the string from character found
 */
char *_strchr(char *s, char c)
{
int a = 0, b;

while (s[a])
{
a++;
}

for (b = 0; b <= a; b++)
{
if (c == s[b])
{
s += b;
return (s);
}
}

return ('\0');
}
2-strlen.c/     0           0     0     644     234       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - A function that prints the length of a string
 * @s: String to find length
 * Return: length of string
 */

int _strlen(char *s)
{
int i = 0;

while (*(s + i))
i++;
return (i);
}
2-strncpy.c/    0           0     0     644     444       `
#include "main.h"

/**
 * _strncpy - copy the first n characters of a string to another string
 * @dest: - destination string
 * @src: - source string to copy from
 * @n: - number of characters to copy from source string
 * Return: address to first string
 */
char *_strncpy(char *dest, char *src, int n)
{
int i = 0;

while (src[i] != '\0' && i < n)
{
*(dest + i) = *(src + i);
i++;
}

while (i < n)
{
dest[i] = '\0';
i++;
}

return (dest);
}
3-islower.c/    0           0     0     644     209       `
#include "main.h"
/**
 *_islower - controls if a character is in lowercase
 *@c: character to be verified
 *Return: return 0 or 1
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);

return (0);
}

3-puts.c/       0           0     0     644     217       `
#include "main.h"

/**
 * _puts -  Function that prints a string
 *
 * @str: string output
 * Return - void
 */

void _puts(char *str)
{
int i = 0;

while (*(str + i))
{
_putchar(*(str + i));
i++;
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     401       `
#include "main.h"

/**
 * _strcmp - compares two strings and return the ascii value
 * of their subtraction in the first character they differ
 * @s1: first string
 * @s2: second string
 * Return: the ascii value of their subtraction
 */
int _strcmp(char *s1, char *s2)
{
int diff = 0;
int i = 0;

while (s1[i] != '\0')
{

if (s1[i] != s2[i])
{
diff = s1[i] - s2[i];
break;
}

i++;
}
return (diff);
}

3-strspn.c/     0           0     0     644     400       `
#include "main.h"

/**
  * _strspn - search a string for a set of bytes
  * @s: source string
  * @accept: accepted string
  *
  * Return: number of bytes in the init segment
  */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int a = 0, b, t = 0;

	while (accept[a])
	{
		b = 0;

		while (s[b] != 32)
		{
			if (accept[a] == s[b])
			{
				t++;
			}

			b++;
		}

		a++;
	}

	return (t);
}
4-isalpha.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _isalpha - controls if a character is alphabetical
 * @c: character to be verified
 * Return: return 0 or1
 */
int _isalpha(int c)
{
if ((c >= 65  && c <= 90) || (c >= 97 && c <= 122))
return (1);

return (0);
}

4-strpbrk.c/    0           0     0     644     422       `
#include "main.h"

/**
  * _strpbrk - search a string for any of a set of bytes
  * @s: source string
  * @accept: accepted characters
  *
  * Return: the string since the first found accepted character
  */
char *_strpbrk(char *s, char *accept)
{
	int a = 0, b;

	while (s[a])
	{
		b = 0;

		while (accept[b])
		{
			if (s[a] == accept[b])
			{
				s += a;
				return (s);
			}

			b++;
		}

		a++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     431       `
#include "main.h"

/**
  * _strstr - locate a substring
  * @haystack: the string to search
  * @needle: the string to find
  *
  * Return: char value
  */
char *_strstr(char *haystack, char *needle)
{
	int a = 0, b = 0;

	while (haystack[a])
	{
		while (needle[b])
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}

			b++;
		}

		if (needle[b] == '\0')
		{
			return (haystack + a);
		}

		a++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     204       `
#include "main.h"
/**
 *_abs - prints the absolute value of a number
 *@i: number targeted
 *Return: returns 0
 */
int _abs(int i)
{
if (i > 0)
return (i);
else if (i < 0)
return (-i);
else
return (0);
}
9-strcpy.c/     0           0     0     644     280       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * @dest: char type string
 * @src: char type string
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
int i = -1;
do {
i++;
dest[i] = src[i];
} while (src[i] != '\0');
return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

